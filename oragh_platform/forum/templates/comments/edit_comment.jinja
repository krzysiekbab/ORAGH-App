{% extends "base.jinja" %}

{% block title %}Edytuj komentarz - {{ post.title }} - Forum{% endblock %}
{% block page_title %}Edytuj komentarz{% endblock %}

{% block extra_css %}
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'forum/css/breadcrumb.css' %}">
{{ form.media.css }}
{% endblock %}

{% block extra_js %}
{{ form.media.js }}
{% endblock %}

{% block content %}

<div class="row justify-content-center">
  <div class="col-md-8 col-lg-6">
    
    <!-- Breadcrumb -->
    {% include 'shared/breadcrumb.jinja' with breadcrumb_path=post.directory.get_breadcrumb_path post_item=post current_page_title="Edytuj komentarz" current_page_icon="fas fa-edit" %}

    <div class="card">
      <div class="card-header">
        <h5 class="mb-0">✏️ Edytuj komentarz</h5>
      </div>
      <div class="card-body">
        
        <!-- Display messages if any -->
        {% if messages %}
          {% for message in messages %}
            <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
              {{ message }}
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Zamknij"></button>
            </div>
          {% endfor %}
        {% endif %}

        <!-- Comment info -->
        <div class="alert alert-info mb-4">
          <h6 class="alert-heading">Edytujesz komentarz w poście:</h6>
          <p class="mb-1"><strong>{{ post.title }}</strong></p>
          <small class="text-muted">
            Pierwotnie utworzony: {{ comment.created_at|date:"d.m.Y H:i" }}
          </small>
        </div>

        <form method="post" id="edit-comment-form" novalidate>
          {% csrf_token %}
          
          {{ form.as_p }}
          
          <div class="d-flex justify-content-between">
            <a href="{{ post.get_absolute_url }}" class="btn btn-outline-secondary">
              ← Anuluj
            </a>
            <button type="submit" class="btn btn-primary">
              ✏️ Zapisz zmiany
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
.card {
  border-radius: 12px;
  box-shadow: 0 4px 16px rgba(0,0,0,0.1);
}

.card-header {
  background: linear-gradient(135deg, #0d6efd 0%, #0b5ed7 100%);
  color: white;
  border-radius: 12px 12px 0 0;
}

.form-control:focus {
  border-color: #0d6efd;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.btn-primary {
  background: linear-gradient(135deg, #0d6efd 0%, #0b5ed7 100%);
  border: none;
}

.btn-primary:hover {
  background: linear-gradient(135deg, #0b5ed7 0%, #0a58ca 100%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.15);
}

.alert-info {
  border-left: 4px solid #0dcaf0;
  background-color: #e7f3ff;
  border-color: #b6effb;
}

.breadcrumb {
  background: none;
  padding: 0;
}

/* Validation styling */
.is-invalid {
  border-color: #dc3545 !important;
  box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
}

.ck-editor.is-invalid {
  border: 2px solid #dc3545 !important;
  border-radius: 0.375rem;
}

.invalid-feedback {
  display: block;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: #dc3545;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {

    
    const form = document.getElementById('edit-comment-form');
    
    // Remove required attribute from CKEditor textarea after CKEditor initializes
    setTimeout(function() {
        const ckTextarea = document.querySelector('textarea[name="content"]');
        if (ckTextarea && ckTextarea.hasAttribute('required')) {
            ckTextarea.removeAttribute('required');

        }
        
        // Also check for CKEditor widget initialization
        const ckEditor = document.querySelector('.ck-editor');
        if (ckEditor) {

            
            // Focus on the CKEditor content area
            setTimeout(function() {
                const editorContent = ckEditor.querySelector('.ck-editor__editable');
                if (editorContent) {
                    editorContent.focus();

                }
            }, 500);
        }
    }, 1000); // Wait for CKEditor to initialize
    
    // Form validation
    if (form) {
        form.addEventListener('submit', function(e) {

            
            clearValidationErrors();
            let isValid = true;
            
            // Validate content with CKEditor
            let hasContent = false;
            const ckEditorInstance = document.querySelector('.ck-editor__editable');
            const contentField = document.querySelector('textarea[name="content"]');
            
            if (ckEditorInstance) {
                const plainText = ckEditorInstance.textContent.trim();
                hasContent = plainText.length > 0;

            } else if (contentField && contentField.value.trim()) {
                hasContent = contentField.value.trim().length > 0;

            }
            
            if (!hasContent) {
                showValidationError('content-field-container', 'Treść komentarza jest wymagana.');
                isValid = false;

            }
            
            if (!isValid) {
                e.preventDefault();

                
                // Scroll to error
                setTimeout(function() {
                    const errorElement = document.querySelector('.is-invalid');
                    if (errorElement) {
                        errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

                    }
                }, 100);
            } else {

            }
        });
    }
    
    function showValidationError(fieldId, message) {

        
        let targetElement;
        
        if (fieldId === 'content-field-container') {
            // Find the content field container
            targetElement = document.querySelector('textarea[name="content"]')?.closest('p') || 
                           document.querySelector('.ck-editor')?.closest('p');
            
            // Also add error styling to CKEditor
            const ckEditor = document.querySelector('.ck-editor');
            if (ckEditor) {
                ckEditor.classList.add('is-invalid');
            }
        } else {
            targetElement = document.getElementById(fieldId);
            if (targetElement) {
                targetElement.classList.add('is-invalid');
            }
        }
        
        if (targetElement) {
            // Remove existing error message
            const existingError = targetElement.querySelector('.invalid-feedback');
            if (existingError) {
                existingError.remove();
            }
            
            // Add new error message
            const errorDiv = document.createElement('div');
            errorDiv.className = 'invalid-feedback';
            errorDiv.style.display = 'block';
            errorDiv.textContent = message;
            targetElement.appendChild(errorDiv);
            

        } else {

        }
    }
    
    function clearValidationErrors() {

        
        // Remove invalid classes
        document.querySelectorAll('.is-invalid').forEach(field => {
            field.classList.remove('is-invalid');
        });
        
        // Remove error messages
        document.querySelectorAll('.invalid-feedback').forEach(error => {
            error.remove();
        });
    }
});
</script>

{% endblock %}
